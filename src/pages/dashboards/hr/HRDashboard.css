/* Styles specific to HRDashboard */

.hr-dashboard .dashboard-layout-with-right-menu {
    display: flex;
    gap: 20px; /* Space between main content and right menu */
    padding-top: 10px; /* Optional: if header doesn't have enough bottom margin/padding */
}

.hr-dashboard .dashboard-main-content {
    flex-grow: 1; /* Main content takes available space */
    /* Any other specific styling for the main content area of HR dashboard */
}

.hr-widgets-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(280px, 1fr));
    gap: 20px;
    margin-top: 20px; /* Space below greeting */
}

/* Ensure RightSideMenu component itself might have its own flex properties
   (e.g. flex: 0 0 250px) defined in RightSideMenu.css to control its width.
   The .right-side-menu class in RightSideMenu.css has order: 1,
   which means if it's a direct child of a flex container along with
   dashboard-main-content, it would try to position itself based on that order.
   However, the structure in HRDashboard.js is:
   <div className="dashboard-layout-with-right-menu">
       <main className="dashboard-main-content">...</main>
       <RightSideMenu ... />
   </div>
   So, the flex properties on dashboard-layout-with-right-menu directly affect
   dashboard-main-content and the nav element rendered by RightSideMenu.
*/

/* If RightSideMenu needs to be explicitly sized here, you could do:
.hr-dashboard .right-side-menu {
    flex-basis: 250px; // Or whatever width is desired
    flex-shrink: 0;
}
But it's better if RightSideMenu.css handles its own sizing.
The `flex: 0 0 250px;` in RightSideMenu.css should achieve this.
*/
